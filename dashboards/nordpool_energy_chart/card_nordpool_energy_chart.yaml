# This code should be copy-pasted into a lovelace card.
# Requires the custom:config-template-card, custom:apexcharts-card, custom:nordpool-card and custom:congif-template-card to be installed. 

type: custom:config-template-card
variables:
  nordpool_sensor: '''sensor.nordpool'''
  grid_import_sensor: '''sensor.sigen_accumulated_grid_energy_import'''
  currency: '''öre'''
  decimals_in_prices: 0
  decimals_in_energy: 3
  chart_price_cutoff_coerficient: 0.1
  chart_title: '''Electricity prices today'''
  total_purchease_price_text: '''Total purchease price'''
  grid_import_text: '''Grid Import'''
  lowest_price_text: '''Lowest to come'''
  highest_price_text: '''Highest to come'''
  price_now_text: '''Price now'''
  now_text: '''Now'''
  set_chart_cutoff: |
    values => {
      if (values[0] <= 0) {
          return "auto";
      }
      return values[0] - (values[0] * values[1])
    }
  get_total_max_nordpool_price: |
    nordpool_sensor => {
      return states[nordpool_sensor].attributes.raw_today.concat(states[nordpool_sensor].attributes.raw_tomorrow).map(data=> data.value).reduce((a, b) => Math.max(a, b), -Infinity)
    }
  get_total_min_nordpool_price: |
    nordpool_sensor => {
      return states[nordpool_sensor].attributes.raw_today.concat(states[nordpool_sensor].attributes.raw_tomorrow).map(data=> data.value).reduce((a, b) => Math.min(a, b), Infinity)
    }
  set_low_bottom_threshold_nordpool_price: |
    values_min_max => {
      return parseFloat(values_min_max[0]) + parseFloat(((values_min_max[1]) - parseFloat(values_min_max[0])) /10)
    }
  set_low_threshold_nordpool_price: |
    values_min_max => {
      return parseFloat(values_min_max[0]) + parseFloat(((values_min_max[1]) - parseFloat(values_min_max[0])) /3)
    }
  set_high_threshold_nordpool_price: |
    values_min_max => {
      return parseFloat(values_min_max[0]) 
      + (( parseFloat(values_min_max[1]) - parseFloat(values_min_max[0]) ) /3) * 2
    }
  set_high_top_threshold_nordpool_price: |
    values_min_max => {
      return parseFloat(values_min_max[0]) + parseFloat(((values_min_max[1]) - parseFloat(values_min_max[0])) /10)*9
    }
entities:
  - ${nordpool_sensor]
card:
  type: custom:apexcharts-card
  graph_span: >-
    ${ states[nordpool_sensor].attributes.raw_today.length +
    states[nordpool_sensor].attributes.raw_tomorrow.length + 'h' }
  yaxis:
    - id: y1
      min: >-
        ${set_chart_cutoff([get_total_min_nordpool_price(nordpool_sensor),chart_price_cutoff_coerficient])}
      max: auto
      apex_config:
        opposite: false
        forceNiceScale: true
        decimalsInFloat: ${decimals_in_prices}
        labels:
          formatter: |
            EVAL:function(value) {return value.toFixed(0) + ' öre'}
    - id: y2
      min: 0
      max: auto
      apex_config:
        opposite: true
        forceNiceScale: true
        decimalsInFloat: ${decimals_in_energy}
        labels:
          formatter: |
            EVAL:function(value) {
              return value.toFixed(1) +" kWh";
            }
  apex_config:
    chart:
      height: 340px
    legend:
      show: false
    title:
      floating: false
      align: center
      style:
        fontSize: 20px
        fontWeight: bold
    xaxis:
      labels:
        datetimeFormatter:
          hour: HH:mm
  show:
    last_updated: true
  experimental:
    color_threshold: true
  header:
    title: ${chart_title}
    show: true
    show_states: true
    colorize_states: true
  span:
    start: day
  now:
    show: true
    label: ${now_text}
  series:
    - entity: ${nordpool_sensor}
      yaxis_id: y1
      name: ${total_purchease_price_text}
      offset: '-30min'
      float_precision: ${decimals_in_prices}
      show:
        extremas: true
        in_header: false
        header_color_threshold: true
      type: column
      data_generator: >
        return (entity.attributes.raw_today.map((start, index) => {
          return [new Date(start["start"]).getTime(), entity.attributes.raw_today[index]["value"]];
        })).concat(entity.attributes.raw_tomorrow.map((start, index) => {

        return [new Date(start["start"]).getTime(),
        entity.attributes.raw_tomorrow[index]["value"]];

        }));
      color_threshold:
        - value: -1000
          color: '#30c752'
        - value: >-
            ${set_low_bottom_threshold_nordpool_price([get_total_min_nordpool_price(nordpool_sensor),get_total_max_nordpool_price(nordpool_sensor)])}
          color: '#28a745'
        - value: >-
            ${set_low_threshold_nordpool_price([get_total_min_nordpool_price(nordpool_sensor),get_total_max_nordpool_price(nordpool_sensor)])}
          color: '#ffed4a'
        - value: >-
            ${set_high_threshold_nordpool_price([get_total_min_nordpool_price(nordpool_sensor),get_total_max_nordpool_price(nordpool_sensor)])}
          color: '#fd7e14'
        - value: >-
            ${set_high_top_threshold_nordpool_price([get_total_min_nordpool_price(nordpool_sensor),get_total_max_nordpool_price(nordpool_sensor)])}
          color: '#dc3545'
    - entity: ${grid_import_sensor}
      yaxis_id: y2
      name: ${grid_import_text}
      color: '#007bff'
      float_precision: ${decimals_in_energy}
      show:
        extremas: false
        in_header: false
        header_color_threshold: true
      type: line
      stroke_width: 3
      extend_to: false
      group_by:
        func: delta
        duration: 1h
    - entity: ${nordpool_sensor}
      type: column
      color: '#28a745'
      float_precision: ${decimals_in_prices}
      stroke_width: 2
      name: ${lowest_price_text}
      show:
        in_chart: false
        legend_value: false
      group_by:
        func: min
        duration: 2d
      data_generator: >
        const now = new Date().getTime(); const futureData =
        entity.attributes.raw_today.concat(entity.attributes.raw_tomorrow).filter(data
        => new Date(data.start).getTime() >= now); return futureData.map((data,
        index) => {
          return [new Date(data.start).getTime(), futureData[index].value];
        });
    - entity: ${nordpool_sensor}
      name: ${price_now_text}
      color: orange
      type: column
      show:
        in_chart: false
      float_precision: ${decimals_in_prices}
    - entity: ${nordpool_sensor}
      type: column
      color: '#dc3545'
      float_precision: ${decimals_in_prices}
      stroke_width: 2
      name: ${highest_price_text}
      show:
        in_chart: false
        legend_value: false
      group_by:
        func: max
        duration: 2d
      data_generator: >
        const now = new Date().getTime(); 

        const futureData =
        entity.attributes.raw_today.concat(entity.attributes.raw_tomorrow).filter(data
        => new Date(data.start).getTime() >= now); 

        return futureData.map((data, index) => {
          return [new Date(data.start).getTime(), futureData[index].value];
        });
layout_options:
  grid_columns: full
